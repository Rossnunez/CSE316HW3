{"ast":null,"code":"/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we're using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it's a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:4000/api'\n}); // THESE ARE ALL THE REQUESTS WE'LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /playlist). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\n//WE NEED A CREATE REQUEST, USE POST REQUEST FOR CREATING\n//WE NEED A DELETE REQUEST\n//WERE MISSING A PUT FOR EDITNG OR UPDATING A LIST\n//SOME OF THE THINGS WERE MISSING THE SERVERSIDE TELLS US HOW IT WORKS AS A LIL HINT\n//MISSING 3 REQUEST TYPES ON THE CLIENT SIDE, WRITE ALL THE CODE FOR THE REACT STUFF\n//WERE GONBNA USE AXIOS BUILT ON TOP OF AJAX, ITS A PROMISE BASED LIBRARY, SO YOU CAN MAKE FUNC CALLS TO DO SOMEONE IN THE BACKEND SERVR\n//FIRST SEND THE CHANGE TO THE SERVER ALWAYS, AND ONLY WHEN THE SEVRER IS DONE DOING THAT, DO WE UPDATE THE STATE LOCALLY\n//user interacts with react comp, we call a func in the store, and then we send that req to the server and we either get back yay it scucc and we update the state or nay and we return an error\n//\n\nexport const getAllPlaylists = () => api.get(`/playlists`);\nexport const getPlaylistPairs = () => api.get('playlistpairs');\nexport const getPlaylistById = id => api.get(`/playlist/${id}`);\nexport const updatePlaylistById = (id, payload) => api.put(`/playlist/${id}`, payload);\nexport const createPlaylist = payload => api.post(`/playlist`, payload);\nexport const deletePlaylistById = id => api.delete();\nconst apis = {\n  getAllPlaylists,\n  getPlaylistPairs,\n  getPlaylistById,\n  updatePlaylistById,\n  createPlaylist,\n  deletePlaylistById\n};\nexport default apis;","map":{"version":3,"names":["axios","api","create","baseURL","getAllPlaylists","get","getPlaylistPairs","getPlaylistById","id","updatePlaylistById","payload","put","createPlaylist","post","deletePlaylistById","delete","apis"],"sources":["C:/Users/nross/Desktop/Playlister_HW3/Playlister_HW3/client/src/api/index.js"],"sourcesContent":["/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we're using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it's a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\n\nimport axios from 'axios'\nconst api = axios.create({\n    baseURL: 'http://localhost:4000/api',\n})\n\n// THESE ARE ALL THE REQUESTS WE'LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /playlist). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\n//WE NEED A CREATE REQUEST, USE POST REQUEST FOR CREATING\n//WE NEED A DELETE REQUEST\n//WERE MISSING A PUT FOR EDITNG OR UPDATING A LIST\n//SOME OF THE THINGS WERE MISSING THE SERVERSIDE TELLS US HOW IT WORKS AS A LIL HINT\n//MISSING 3 REQUEST TYPES ON THE CLIENT SIDE, WRITE ALL THE CODE FOR THE REACT STUFF\n//WERE GONBNA USE AXIOS BUILT ON TOP OF AJAX, ITS A PROMISE BASED LIBRARY, SO YOU CAN MAKE FUNC CALLS TO DO SOMEONE IN THE BACKEND SERVR\n//FIRST SEND THE CHANGE TO THE SERVER ALWAYS, AND ONLY WHEN THE SEVRER IS DONE DOING THAT, DO WE UPDATE THE STATE LOCALLY\n//user interacts with react comp, we call a func in the store, and then we send that req to the server and we either get back yay it scucc and we update the state or nay and we return an error\n//\nexport const getAllPlaylists = () => api.get(`/playlists`)\nexport const getPlaylistPairs = () => api.get('playlistpairs')\nexport const getPlaylistById = (id) => api.get(`/playlist/${id}`)\nexport const updatePlaylistById = (id, payload) => api.put(`/playlist/${id}`, payload)\nexport const createPlaylist = (payload) => api.post(`/playlist`, payload)\nexport const deletePlaylistById = (id) => api.delete()\n\nconst apis = {\n    getAllPlaylists,\n    getPlaylistPairs,\n    getPlaylistById,\n    updatePlaylistById,\n    createPlaylist,\n    deletePlaylistById\n}\n\nexport default apis\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;EACrBC,OAAO,EAAE;AADY,CAAb,CAAZ,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAMH,GAAG,CAACI,GAAJ,CAAS,YAAT,CAA9B;AACP,OAAO,MAAMC,gBAAgB,GAAG,MAAML,GAAG,CAACI,GAAJ,CAAQ,eAAR,CAA/B;AACP,OAAO,MAAME,eAAe,GAAIC,EAAD,IAAQP,GAAG,CAACI,GAAJ,CAAS,aAAYG,EAAG,EAAxB,CAAhC;AACP,OAAO,MAAMC,kBAAkB,GAAG,CAACD,EAAD,EAAKE,OAAL,KAAiBT,GAAG,CAACU,GAAJ,CAAS,aAAYH,EAAG,EAAxB,EAA2BE,OAA3B,CAA5C;AACP,OAAO,MAAME,cAAc,GAAIF,OAAD,IAAaT,GAAG,CAACY,IAAJ,CAAU,WAAV,EAAsBH,OAAtB,CAApC;AACP,OAAO,MAAMI,kBAAkB,GAAIN,EAAD,IAAQP,GAAG,CAACc,MAAJ,EAAnC;AAEP,MAAMC,IAAI,GAAG;EACTZ,eADS;EAETE,gBAFS;EAGTC,eAHS;EAITE,kBAJS;EAKTG,cALS;EAMTE;AANS,CAAb;AASA,eAAeE,IAAf"},"metadata":{},"sourceType":"module"}